{"coordinates":"pkg:maven/org.springframework/spring-core@4.3.9.RELEASE","description":"","reference":"https://ossindex.sonatype.org/component/pkg:maven/org.springframework/spring-core@4.3.9.RELEASE?utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","vulnerabilities":[{"id":"9a3de118-b038-49ed-9af7-533210c9d85f","displayName":"CVE-2018-1270","title":"[CVE-2018-1270]  Improperly Implemented Security Check for Standard","description":"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack.","cvssScore":9.8,"cvssVector":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H","cve":"CVE-2018-1270","reference":"https://ossindex.sonatype.org/vulnerability/9a3de118-b038-49ed-9af7-533210c9d85f?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html","http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html","https://pivotal.io/security/cve-2018-1270","https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html","https://nvd.nist.gov/vuln/detail/CVE-2018-1270"]},{"id":"580d61c3-20df-4bb8-99c3-36c89e0d7550","displayName":"CVE-2018-1271","title":"[CVE-2018-1271]  Improper Limitation of a Pathname to a Restricted Directory (\"Path Traversal\")","description":"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to configure Spring MVC to serve static resources (e.g. CSS, JS, images). When static resources are served from a file system on Windows (as opposed to the classpath, or the ServletContext), a malicious user can send a request using a specially crafted URL that can lead a directory traversal attack.","cvssScore":5.9,"cvssVector":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N","cve":"CVE-2018-1271","reference":"https://ossindex.sonatype.org/vulnerability/580d61c3-20df-4bb8-99c3-36c89e0d7550?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html","http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html","https://pivotal.io/security/cve-2018-1271","https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html","https://nvd.nist.gov/vuln/detail/CVE-2018-1271"]},{"id":"aa7190e3-4c47-42d6-82f6-afaf1da5762e","displayName":"CVE-2018-1272","title":"[CVE-2018-1272]  Permissions, Privileges, and Access Controls","description":"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles.","cvssScore":7.5,"cvssVector":"CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H","cve":"CVE-2018-1272","reference":"https://ossindex.sonatype.org/vulnerability/aa7190e3-4c47-42d6-82f6-afaf1da5762e?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html","http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html","https://pivotal.io/security/cve-2018-1272","https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html","https://nvd.nist.gov/vuln/detail/CVE-2018-1272"]},{"id":"39054b8e-6165-4274-ae94-1cfd9b61e5a8","displayName":"CVE-2020-5421","title":"[CVE-2020-5421] In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3....","description":"In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.","cvssScore":8.8,"cvssVector":"CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H","cve":"CVE-2020-5421","reference":"https://ossindex.sonatype.org/vulnerability/39054b8e-6165-4274-ae94-1cfd9b61e5a8?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["https://nvd.nist.gov/vuln/detail/CVE-2020-5421"]},{"id":"725de286-eb44-4332-81a9-4f7bb8d35ae3","displayName":"CVE-2018-15756","title":"[CVE-2018-15756]  Resource Management Errors","description":"Spring Framework, version 5.1, versions 5.0.x prior to 5.0.10, versions 4.3.x prior to 4.3.20, and older unsupported versions on the 4.2.x branch provide support for range requests when serving static resources through the ResourceHttpRequestHandler, or starting in 5.0 when an annotated controller returns an org.springframework.core.io.Resource. A malicious user (or attacker) can add a range header with a high number of ranges, or with wide ranges that overlap, or both, for a denial of service attack. This vulnerability affects applications that depend on either spring-webmvc or spring-webflux. Such applications must also have a registration for serving static resources (e.g. JS, CSS, images, and others), or have an annotated controller that returns an org.springframework.core.io.Resource. Spring Boot applications that depend on spring-boot-starter-web or spring-boot-starter-webflux are ready to serve static resources out of the box and are therefore vulnerable.","cvssScore":7.5,"cvssVector":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H","cve":"CVE-2018-15756","reference":"https://ossindex.sonatype.org/vulnerability/725de286-eb44-4332-81a9-4f7bb8d35ae3?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["https://pivotal.io/security/cve-2018-15756","https://nvd.nist.gov/vuln/detail/CVE-2018-15756"]},{"id":"28403735-2fb2-4771-a798-fd4bac8e5a3b","displayName":"CVE-2018-1199","title":"[CVE-2018-1199]  Improper Input Validation","description":"Spring Security (Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4, and 5.0.x before 5.0.1; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before 5.0.3) does not consider URL path parameters when processing security constraints. By adding a URL path parameter with special encodings, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification. Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. In this particular attack, different character encodings used in path parameters allows secured Spring MVC static resource URLs to be bypassed.","cvssScore":5.3,"cvssVector":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N","cve":"CVE-2018-1199","reference":"https://ossindex.sonatype.org/vulnerability/28403735-2fb2-4771-a798-fd4bac8e5a3b?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["https://pivotal.io/security/cve-2018-1199","https://nvd.nist.gov/vuln/detail/CVE-2018-1199"]},{"id":"0337c729-6594-4fea-aff0-f866c46730c3","displayName":"CVE-2018-1275","title":"[CVE-2018-1275]  Improperly Implemented Security Check for Standard","description":"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.16 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack. This CVE addresses the partial fix for CVE-2018-1270 in the 4.3.x branch of the Spring Framework.","cvssScore":9.8,"cvssVector":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H","cve":"CVE-2018-1275","reference":"https://ossindex.sonatype.org/vulnerability/0337c729-6594-4fea-aff0-f866c46730c3?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html","http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html","https://pivotal.io/security/cve-2018-1275","https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html","https://nvd.nist.gov/vuln/detail/CVE-2018-1275"]},{"id":"60c23117-20f9-4f6c-a9a8-98ffe636ec6f","displayName":"CVE-2018-1257","title":"[CVE-2018-1257]  Improper Input Validation","description":"Spring Framework, versions 5.0.x prior to 5.0.6, versions 4.3.x prior to 4.3.17, and older unsupported versions allows applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a regular expression, denial of service attack.","cvssScore":6.5,"cvssVector":"CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H","cve":"CVE-2018-1257","reference":"https://ossindex.sonatype.org/vulnerability/60c23117-20f9-4f6c-a9a8-98ffe636ec6f?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html","https://pivotal.io/security/cve-2018-1257","https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html","https://nvd.nist.gov/vuln/detail/CVE-2018-1257"]},{"id":"6925beb8-195e-426f-bbb1-2d9474b7bbf5","displayName":"CVE-2018-11040","title":"[CVE-2018-11040] Spring Framework, versions 5.0.x prior to 5.0.7 and 4.3.x prior to 4.3.18 and ol...","description":"Spring Framework, versions 5.0.x prior to 5.0.7 and 4.3.x prior to 4.3.18 and older unsupported versions, allows web applications to enable cross-domain requests via JSONP (JSON with Padding) through AbstractJsonpResponseBodyAdvice for REST controllers and MappingJackson2JsonView for browser requests. Both are not enabled by default in Spring Framework nor Spring Boot, however, when MappingJackson2JsonView is configured in an application, JSONP support is automatically ready to use through the \"jsonp\" and \"callback\" JSONP parameters, enabling cross-domain requests.","cvssScore":5.9,"cvssVector":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N","cve":"CVE-2018-11040","reference":"https://ossindex.sonatype.org/vulnerability/6925beb8-195e-426f-bbb1-2d9474b7bbf5?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html","https://pivotal.io/security/cve-2018-11040","https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html","https://nvd.nist.gov/vuln/detail/CVE-2018-11040"]},{"id":"f4e5d263-6a76-494b-80fc-c31e1cbfa409","displayName":"CVE-2018-11039","title":"[CVE-2018-11039]  Improper Input Validation","description":"Spring Framework (versions 5.0.x prior to 5.0.7, versions 4.3.x prior to 4.3.18, and older unsupported versions) allow web applications to change the HTTP request method to any HTTP method (including TRACE) using the HiddenHttpMethodFilter in Spring MVC. If an application has a pre-existing XSS vulnerability, a malicious user (or attacker) can use this filter to escalate to an XST (Cross Site Tracing) attack.","cvssScore":5.9,"cvssVector":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N","cve":"CVE-2018-11039","reference":"https://ossindex.sonatype.org/vulnerability/f4e5d263-6a76-494b-80fc-c31e1cbfa409?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html","https://pivotal.io/security/cve-2018-11039","https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html","https://nvd.nist.gov/vuln/detail/CVE-2018-11039"]}]}