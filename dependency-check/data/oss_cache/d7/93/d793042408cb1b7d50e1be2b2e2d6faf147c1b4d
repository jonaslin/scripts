{"coordinates":"pkg:maven/org.springframework.security/spring-security-core@4.2.3.RELEASE","description":"","reference":"https://ossindex.sonatype.org/component/pkg:maven/org.springframework.security/spring-security-core@4.2.3.RELEASE?utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","vulnerabilities":[{"id":"d6ea6ac5-572d-45c3-a703-4e9726efeacd","displayName":"OSSINDEX-4e97-26ef-eacd","title":"BREACH attack possible in CSRF tokens","description":"\u003e The CSRF tokens generated by Spring are vulnerable to a BREACH attack.\u003e \u003e ...\u003e \u003e This only occurs when you turn on CSRF protection in Spring and also have HTTP compression enabled somewhere in your web server stack.\u003e \u003e -- [github.com](https://github.com/spring-projects/spring-security/issues/4001)","cvssScore":0.0,"reference":"https://ossindex.sonatype.org/vulnerability/d6ea6ac5-572d-45c3-a703-4e9726efeacd?component-type\u003dmaven\u0026component-name\u003dorg.springframework.security.spring-security-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["https://github.com/spring-projects/spring-security/issues/4001"]},{"id":"1decd28e-584b-47c7-b31e-42b6de9ac133","displayName":"CVE-2021-22112","title":"[CVE-2021-22112] Spring Security 5.4.x prior to 5.4.4, 5.3.x prior to 5.3.8.RELEASE, 5.2.x prior ...","description":"Spring Security 5.4.x prior to 5.4.4, 5.3.x prior to 5.3.8.RELEASE, 5.2.x prior to 5.2.9.RELEASE, and older unsupported versions can fail to save the SecurityContext if it is changed more than once in a single request.A malicious user cannot cause the bug to happen (it must be programmed in). However, if the application\u0027s intent is to only allow the user to run with elevated privileges in a small portion of the application, the bug can be leveraged to extend those privileges to the rest of the application.","cvssScore":8.8,"cvssVector":"CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H","cve":"CVE-2021-22112","reference":"https://ossindex.sonatype.org/vulnerability/1decd28e-584b-47c7-b31e-42b6de9ac133?component-type\u003dmaven\u0026component-name\u003dorg.springframework.security.spring-security-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["https://nvd.nist.gov/vuln/detail/CVE-2021-22112"]},{"id":"28403735-2fb2-4771-a798-fd4bac8e5a3b","displayName":"CVE-2018-1199","title":"[CVE-2018-1199]  Improper Input Validation","description":"Spring Security (Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4, and 5.0.x before 5.0.1; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before 5.0.3) does not consider URL path parameters when processing security constraints. By adding a URL path parameter with special encodings, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification. Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. In this particular attack, different character encodings used in path parameters allows secured Spring MVC static resource URLs to be bypassed.","cvssScore":5.3,"cvssVector":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N","cve":"CVE-2018-1199","reference":"https://ossindex.sonatype.org/vulnerability/28403735-2fb2-4771-a798-fd4bac8e5a3b?component-type\u003dmaven\u0026component-name\u003dorg.springframework.security.spring-security-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["https://pivotal.io/security/cve-2018-1199","https://nvd.nist.gov/vuln/detail/CVE-2018-1199"]},{"id":"cda341be-3f80-4e93-86ff-34e581defedd","displayName":"CVE-2019-3795","title":"[CVE-2019-3795]  Insufficient Entropy in PRNG","description":"Spring Security versions 4.2.x prior to 4.2.12, 5.0.x prior to 5.0.12, and 5.1.x prior to 5.1.5 contain an insecure randomness vulnerability when using SecureRandomFactoryBean#setSeed to configure a SecureRandom instance. In order to be impacted, an honest application must provide a seed and make the resulting random material available to an attacker for inspection.","cvssScore":5.3,"cvssVector":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N","cve":"CVE-2019-3795","reference":"https://ossindex.sonatype.org/vulnerability/cda341be-3f80-4e93-86ff-34e581defedd?component-type\u003dmaven\u0026component-name\u003dorg.springframework.security.spring-security-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["https://pivotal.io/security/cve-2019-3795","https://nvd.nist.gov/vuln/detail/CVE-2019-3795"]},{"id":"b635d44f-095b-49dd-9c29-708fd92a33e6","displayName":"CVE-2019-11272","title":"[CVE-2019-11272] Spring Security, versions 4.2.x up to 4.2.12, and older unsupported versions sup...","description":"Spring Security, versions 4.2.x up to 4.2.12, and older unsupported versions support plain text passwords using PlaintextPasswordEncoder. If an application using an affected version of Spring Security is leveraging PlaintextPasswordEncoder and a user has a null encoded password, a malicious user (or attacker) can authenticate using a password of ?null?.","cvssScore":7.3,"cvssVector":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L","cve":"CVE-2019-11272","reference":"https://ossindex.sonatype.org/vulnerability/b635d44f-095b-49dd-9c29-708fd92a33e6?component-type\u003dmaven\u0026component-name\u003dorg.springframework.security.spring-security-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["https://pivotal.io/security/cve-2019-11272","https://nvd.nist.gov/vuln/detail/CVE-2019-11272"]},{"id":"d084c453-ea3d-4fac-9957-bb3c114ff535","displayName":"CVE-2020-5408","title":"[CVE-2020-5408] Spring Security versions 5.3.x prior to 5.3.2, 5.2.x prior to 5.2.4, 5.1.x prior...","description":"Spring Security versions 5.3.x prior to 5.3.2, 5.2.x prior to 5.2.4, 5.1.x prior to 5.1.10, 5.0.x prior to 5.0.16 and 4.2.x prior to 4.2.16 use a fixed null initialization vector with CBC Mode in the implementation of the queryable text encryptor. A malicious user with access to the data that has been encrypted using such an encryptor may be able to derive the unencrypted values using a dictionary attack.","cvssScore":6.5,"cvssVector":"CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N","cve":"CVE-2020-5408","reference":"https://ossindex.sonatype.org/vulnerability/d084c453-ea3d-4fac-9957-bb3c114ff535?component-type\u003dmaven\u0026component-name\u003dorg.springframework.security.spring-security-core\u0026utm_source\u003ddependency-check\u0026utm_medium\u003dintegration\u0026utm_content\u003d6.4.1","externalReferences":["https://nvd.nist.gov/vuln/detail/CVE-2020-5408"]}]}